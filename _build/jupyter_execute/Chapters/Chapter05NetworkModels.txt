#Solving Example 1 to find the Shortest path using python...

import sys

class Graph():

    def __init__(self, vertices):
        self.V = vertices
        self.graph = [[0 for column in range(vertices)]
                        for row in range(vertices)]

    def printSolution(self, dist):
        print ("The shortest path from A to F is:- ")
        print(dist[self.V-1])

    #A utility function to find the vertex with
    # minimum distance value, from the set of vertices
    # not yet included in shortest path tree

    def minDistance(self, dist, sptSet):

        # Initialize minimum distance for next node
        min = sys.maxsize


        for u in range(self.V):
            if dist[u] < min and sptSet[u] == False:
                min = dist[u]
                min_index = u

        return min_index

 # Funtion that implements Dijkstra's single source
 # shortest path algorithm for a graph represented
 # using adjacency matrix representation

 # Implementation
    def dijkstra(self, src):
    
        dist = [sys.maxsize] * self.V
        dist[src] = 0
        sptSet = [False] * self.V
    
        for cout in range(self.V):

            x = self.minDistance(dist, sptSet)

            sptSet[x] = True

            for y in range(self.V):
                if self.graph[x][y] > 0 and sptSet[y] == False and dist[y] > dist[x] + self.graph[x][y]:
                        dist[y] = dist[x] + self.graph[x][y]

        self.printSolution(dist)

# Driver program
g = Graph(5)
g.graph = [[0,13,13,7,0],
           [13,0,0,1,6],
           [13,0,0,6,0],
           [7,1,6,0,4],
           [0,6,0,4,0]
           ];

g.dijkstra(0);

#Solving the above Question in example 2 to find maximal flow using python
#We took the codes as references from different python language sources and encoded in here.

class Graph:
 
    def __init__(self, graph):
        self.graph = graph  # residual graph
        self. ROW = len(graph)

    '''Returns true if there is a path from source 's' to sink 't' in
    residual graph. Also fills parent[] to store the path '''
 
    def BFS(self, s, t, parent):
 
        # Mark all the vertices as not visited
        visited = [False]*(self.ROW)
 
        # Create a queue for BFS
        queue = []
 
        # Mark the source node as visited and enqueue it
        queue.append(s)
        visited[s] = True
 
         # Standard BFS Loop
        while queue:
 
            # Dequeue a vertex from queue and print it
            u = queue.pop(0)
 
          
            for ind, val in enumerate(self.graph[u]):
                if visited[ind] == False and val > 0:
                     
                    queue.append(ind)
                    visited[ind] = True
                    parent[ind] = u
                    if ind == t:
                        return True
 
        
        return False
             
     
    # Returns tne maximum flow from s to t in the given graph
    def FordFulkerson(self, source, sink):
 
        # This array is filled by BFS and to store path
        parent = [-1]*(self.ROW)
 
        max_flow = 0 # There is no flow initially
 
        while self.BFS(source, sink, parent) :
 
        
            path_flow = float("Inf")
            s = sink
            while(s !=  source):
                path_flow = min (path_flow, self.graph[parent[s]][s])
                s = parent[s]
 
            # Add path flow to overall flow
            max_flow +=  path_flow
 
            # update residual capacities of the edges and reverse edges
            # along the path
            v = sink
            while(v !=  source):
                u = parent[v]
                self.graph[u][v] -= path_flow
                self.graph[v][u] += path_flow
                v = parent[v]
 
        return max_flow
graph = [[0, 10, 10, 0, 0, 0],
        [0, 0, 2, 4, 8, 0],
        [0, 0, 0, 0, 9, 0],
        [0, 0, 0, 0, 0, 10],
        [0, 0, 0, 6, 0, 10],
        [0, 0, 0, 0, 0, 0]]
 
g = Graph(graph)
 
source = 0; sink = 5
  
print ("The maximum possible flow is %d " % g.FordFulkerson(source, sink))


#Solving the above Question in example 3 to solve Minimum spanning tree using python
#We took the codes as references from different python language sources.

# to do union by rank of x and y
def union(parent, rank, x, y):
    xparent = find(parent, x)
    yparent = find(parent, y)

    if rank[xparent] < rank[yparent]:
        parent[xparent] = yparent
    elif rank[xparent] > rank[yparent]:
        parent[yparent] = xparent
    else:
        parent[yparent] = xparent
        rank[xparent] += 1

# Function to find parent of X Uses path compression technique
def find(parent, x):
        if parent[x] == x:
                return x
        return find(parent, parent[x])

def mst(graph, V, E):
        # to keep track for vertices covered
        e = 0
        # to keep track of newly added edges into MST
        k = 0

        # to store the parent of each node
        parent=[]

        # to store rank of
        rank = []
        for vertex in range(V):
                parent.append(vertex)
                rank.append(0)

        result = []
        # Total Number of edges going into mst are 1 Less then number of vertices
        while e < V - 1:
                # Selecting the edge having smallest weight
                v1, v2, w = graph[k]
                k = k + 1
                x = find(parent, v1)
                y = find(parent, v2)
                print(x,y)
                # Checking if including this edge creates a cycle
                if x != y:
                        e = e + 1
                        result.append([v1, v2, w])
                        union(parent, rank, x, y)
                # if v1 and v2 hav the same parent which is x==y ignore the edge

                minimumCost = 0
                print ("Edges in the constructed MST")
                for u, v, weight in result:
                        minimumCost += weight
                        print("%d -- %d == %d" % (u, v, weight))
                print("Minimum Spanning Tree" , minimumCost)


# Creating A Graph
graph = []
no_of_Vertices = 6
no_of_Edges = 10

graph.append([0,1,11])
graph.append([0,2,1])
graph.append([1,2,5])
graph.append([1,3,7])
graph.append([2,3,7])
graph.append([1,4,5])
graph.append([3,4,2])
graph.append([3,5,3])
graph.append([4,5,4])
graph.append([0,5,4])


# Code for taking Input From user
# for i in range(no_of_Edges):
#       print("Enter Vertex1, Vertex2, Weight space separated\n")
#       v1,v2,w = input().strip().split(" ")
#       graph.append([int(v1),int(v2),int(w)])

# Sort the graph according to Edge weights
graph = sorted(graph,key=lambda x: x[2])
# Calling Minimum Spanning Tree Function
mst(graph,no_of_Vertices,no_of_Edges)
